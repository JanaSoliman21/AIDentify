// <auto-generated />
using System;
using AIDentify.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIDentify.Migrations
{
    [DbContext(typeof(ContextAIDentify))]
    [Migration("20250208203313_Final")]
    partial class Final
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIDentify.Models.Model", b =>
                {
                    b.Property<string>("ModelID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Accuracy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralFeedback")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("ModelItSelf")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ModelID");

                    b.HasIndex("PlanId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("AIDentify.Models.PayDate", b =>
                {
                    b.Property<string>("PayDateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PayDateId");

                    b.ToTable("PayDate");
                });

            modelBuilder.Entity("AIDentify.Models.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("WayOfPayment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("AIDentify.Models.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Updateable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("AIDentify.Models.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResultId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscriberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("AIDentify.Models.Result", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResultValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Result");

                    b.HasDiscriminator().HasValue("Result");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AIDentify.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewItSelf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ModelId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("AIDentify.Models.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("PayDateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PayDateId");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("AIDentify.Models.SystemUpdate", b =>
                {
                    b.Property<string>("SystemUpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UpdateType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedDescribtion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SystemUpdateId");

                    b.HasIndex("AdminId");

                    b.ToTable("SystemUpdate");
                });

            modelBuilder.Entity("AIDentify.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserID");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AIDentify.Models.AgeM", b =>
                {
                    b.HasBaseType("AIDentify.Models.Result");

                    b.Property<int>("AgeValue")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AgeM");
                });

            modelBuilder.Entity("AIDentify.Models.DiseaseM", b =>
                {
                    b.HasBaseType("AIDentify.Models.Result");

                    b.Property<byte>("DiseaseValue")
                        .HasColumnType("tinyint");

                    b.HasDiscriminator().HasValue("DiseaseM");
                });

            modelBuilder.Entity("AIDentify.Models.GenderM", b =>
                {
                    b.HasBaseType("AIDentify.Models.Result");

                    b.Property<int>("GenderValue")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("GenderM");
                });

            modelBuilder.Entity("AIDentify.Models.TeethNumberingM", b =>
                {
                    b.HasBaseType("AIDentify.Models.Result");

                    b.Property<int>("TeethNumberingValue")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("TeethNumberingM");
                });

            modelBuilder.Entity("AIDentify.Models.Admin", b =>
                {
                    b.HasBaseType("AIDentify.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("AIDentify.Models.Subscriber", b =>
                {
                    b.HasBaseType("AIDentify.Models.User");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SubscriptionId");

                    b.HasDiscriminator().HasValue("Subscriber");
                });

            modelBuilder.Entity("AIDentify.Models.Model", b =>
                {
                    b.HasOne("AIDentify.Models.Plan", null)
                        .WithMany("Models")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("AIDentify.Models.Report", b =>
                {
                    b.HasOne("AIDentify.Models.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIDentify.Models.Subscriber", "Subscriber")
                        .WithMany("Reports")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("AIDentify.Models.Result", b =>
                {
                    b.HasOne("AIDentify.Models.Model", "Model")
                        .WithMany("Results")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("AIDentify.Models.Review", b =>
                {
                    b.HasOne("AIDentify.Models.Model", "Model")
                        .WithMany("Review")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("AIDentify.Models.Subscription", b =>
                {
                    b.HasOne("AIDentify.Models.PayDate", "PayDate")
                        .WithMany()
                        .HasForeignKey("PayDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIDentify.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayDate");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("AIDentify.Models.SystemUpdate", b =>
                {
                    b.HasOne("AIDentify.Models.Admin", "Admin")
                        .WithMany("SystemUpdates")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("AIDentify.Models.Subscriber", b =>
                {
                    b.HasOne("AIDentify.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIDentify.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AIDentify.Models.Model", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("AIDentify.Models.Plan", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("AIDentify.Models.Admin", b =>
                {
                    b.Navigation("SystemUpdates");
                });

            modelBuilder.Entity("AIDentify.Models.Subscriber", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
